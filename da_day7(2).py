# -*- coding: utf-8 -*-
"""DA_DAY7(2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkCyhJhxiltDVxz9G7E3XR5pgzReooZ8
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
IMG_SIZE=224
BATCH_SIZE=32

train_datagen=ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)
train_generator=train_datagen.flow_from_directory('/content/drive/MyDrive/train',
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training')
val_generator=train_datagen.flow_from_directory('/content/drive/MyDrive/train',
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation')
test_generator=train_datagen.flow_from_directory('/content/drive/MyDrive/test',
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation')

from google.colab import drive
drive.mount('/content/drive')

model=keras.Sequential([
    layers.Conv2D(32,(3,3),activation='relu',input_shape=(IMG_SIZE,IMG_SIZE,3)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(128,(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(128,activation='relu'),
    layers.Dense(1,activation='sigmoid')
])

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history=model.fit(train_generator,validation_data=val_generator,epochs=1)

model.save("Model.h5","label.txt")

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
model=load_model('/content/Model.h5')
test_image_path = '/content/drive/MyDrive/test/raw mangoes/mango 6.jpg'
img=image.load_img(test_image_path,target_size=(224,224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array,axis=0)
img_array /= 255.
prediction=model.predict(img_array)
if prediction < 0.5:
  print("Prediction:ITS A RAW MANGO (probablity:",prediction[0][0],")")
else:
  print("Prediction: ITS A NOT RAW MANGO (probability:",prediction[0][0],")")